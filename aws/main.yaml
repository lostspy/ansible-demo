---
- name: Provision EC2 instance
  hosts: localhost
  connection: local
  gather_facts: no
  vars_files: var.yaml
  tasks:      
    - name: Create a new VPC 
      amazon.aws.ec2_vpc_net:
        name: "Ansible-Test"
        cidr_block: "{{ cidr_block }}"
        region: "{{ region }}"
      register: vpc

    - name: nullify the variables
      set_fact:
        subnet: ""

    - name: Create a new Subnet
      amazon.aws.ec2_vpc_subnet:
        state: present
        cidr: "{{ cidr }}"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
      register: subnet

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
      register: igw

    - name: Attach Internet Gateway to VPC
      amazon.aws.ec2_vpc_igw_info:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
      register: vpc_with_igw
      when: igw.changed

    - name: Create Security Group
      amazon.aws.ec2_group:
        name: MySecurityGroup
        description: Allow SSH, 8080, HTTP and HTTPs traffic
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
      register: security_group

    - name: Launch an EC2 Instance
      amazon.aws.ec2_instance:
        name: "Ansible-Demo-Instance"
        key_name: "{{ key_name }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        instance_type: "{{ instance_type }}"
        security_group: "{{ security_group.group_id  }}"
        count: 1
        wait: yes
        aws_region: "{{ region }}"
        network:
          assign_public_ip: true
        image_id: "{{ ami }}"
      register: ec2_instance_info
    
    - name: print the instace state
      debug:
        msg: "{{ ec2_instance_info }}"